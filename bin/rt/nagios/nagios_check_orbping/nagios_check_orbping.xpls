#
#   This code was created as part of the USArray ANF project.
#   See http://anf.ucsd.edu/
#
#   Written By: Geoff Davis 28-May-2014
#
# Based on the nagios_check_orblag plugin

use strict;
use Socket;
use Getopt::Long;
use File::Basename;
use Time::HiRes;
use vars qw($opt_version $opt_help $opt_verbose $opt_warn $opt_crit
            $opt_orb $opt_match $opt_reject
	    $warn_at $warn_low $warn_high $crit_at $crit_low $crit_high
	    $VERBOSE $PROGNAME $STATE);


use nagios_antelope_utils qw(&categorize_return_value
			     &parse_ranges
			     &print_results
			     &print_version
			     %ERRORS
			     $VERBOSE);

# antelope includes
use orb;
use Datascope;
use Socket;

# Prototypes
sub check_args();
sub valid_lag($);
sub print_help();
sub print_usage($);
sub ping_orbserver();

# Constants
our $VERSION = '1.0';
our $AUTHOR = "Geoff Davis, gadavis\@ucsd.edu";
our $PROGNAME = "nagios_check_orbping";
our $NAGIOS_SERVICE_NAME = "ORBPING";

# Defaults
our $VERBOSE = 0;
our $ORB = ":"; # orb and port, ie. "orbstat -i $ORB"
our $MATCH = '';
our $REJECT = '';

######
#
MAIN:
{

    my ($result_code, $result_perf, $status);
    Getopt::Long::Configure("bundling");
    $status = check_args();
    if ($status)
    {
	print "ERROR: processing arguments\n";
	exit $ERRORS{'UNKNOWN'};
    }

    my ($version, $rtt) = ping_orbserver();

    # check if we got a laggard back at all
    if (!defined $version)
    {
      print_results($NAGIOS_SERVICE_NAME, $ERRORS{'CRITICAL'}, 0,
        "No orbping value found");
      exit $ERRORS{'CRITICAL'};
    }

    # Print the results and exit
    $result_code = $ERRORS{'OK'};
    $result_perf = sprintf ('%.4f',$rtt);
    print_results($NAGIOS_SERVICE_NAME, $result_code, $result_perf,
      "orbping", "Server version is $version" );
    exit $result_code;
}

######
# Check the arguments supplied
sub check_args()
{
    my ($fetching_params) = 0;

    GetOptions(
        "V"     => \$opt_version,  "version"  => \$opt_version,
        "v"     => \$opt_verbose,  "verbose"  => \$opt_verbose,
        "h"     => \$opt_help,     "help"     => \$opt_help,
        "o=s"   => \$opt_orb,      "orb=s"    => \$opt_orb,
    );

    # handle options here
    if ($opt_version)
    {
        print_version($VERSION, $AUTHOR);
        exit $ERRORS{'OK'};
    }

    if ($opt_verbose)
    {
        $VERBOSE = 1;
        $nagios_antelope_utils::VERBOSE = 1;
    }

    if ($opt_help)
    {
        print_help();
        exit $ERRORS{'OK'};
    }

    if ($opt_orb)
    {
        $ORB = $opt_orb;
    }

    return 0;
}

######
# Print the usage for the command
# Param: Explanation for the problem, can be ""
sub print_usage($)
{
    my ($explanation) = shift;

    if (defined $explanation)
    {
        print "$explanation\n";
    }

    print "Usage: $PROGNAME [-o <orb>] [-v verbose]\n";
}

######
#
sub print_help()
{
    print_version($VERSION, $AUTHOR);
    print_usage("");
    print "\n";
    print " Nagios plugin to ping the specified orbserver orb.\n";
    print " Check is performed from the Nagios server, not remotely\n";
    print "\n";
    print "-o  (--orb)     = The ORB to look at (addr:port, default: $ORB)\n";
    print "\n";
    print "-h  (--help)    = This help message\n";
    print "-V  (--version) = The version of this script\n";
    print "-v  (--verbose) = The verbosity of the output\n";
    print "\n";
}
######
# Ping the specified, and return the amount of time the ping took in ms, plus
# the version of the orbserver
# RTT does not include orbserver connection setup time, only the orbping itself
# Returns: an array with ($version, $rtt) or undef if an error occurred.
sub ping_orbserver()
{
    my ($orb);
    my ($version); # returned by orbping()
    my ($rtt) = 0;

    $orb = orbopen("$ORB", "r&");

    # bail early if we couldn't connect to the orb
    if ($orb < 0)
    {
        if ($VERBOSE)
        {
            print ("Could not connect to orb \"$ORB\"\n");
        }
        return undef;
    }

    # Get start time
    $rtt = Time::HiRes::time();
    $version = orbping($orb);
    $rtt = Time::HiRes::time() - $rtt;
    orbclose($orb);

    if ($version < 1)
    {
        return undef;
    }

    return ($version, $rtt);
}
# vim:ft=perl
