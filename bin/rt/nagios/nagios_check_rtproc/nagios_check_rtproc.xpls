use strict;
use Datascope;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

our ($prog, $opt_version, $opt_verbose, $opt_help, $opt_warn, $opt_alarm, $opt_crit,
    $opt_ignore, %ERRORS, @REASON, $VERSION, @RETVAL, @RETVAL_SORT,
    $thresh_warn, $thresh_alarm, $thresh_crit );

$VERSION = 1.1;
our $VERBOSE=0;

$prog = basename($0);
$thresh_warn    = 2;
$thresh_alarm   = 5;
$thresh_crit    = 10;

%ERRORS = (
        'OK'      => 0,
        'WARN'    => 1,
        'ALARM'   => 2,
        'CRIT'    => 3,
        'UNKNOWN' => 4
        );

MAIN:
{
# Make sure options switches are always processed first on the command line
    Getopt::Long::Configure("require_order");

# Validate input
    my ($rtproctable,$rtproc) = check_args();

# Query the rtsys db for process information
    my ($name,$pid,$starts,$last_start,$execution) = db_query($rtproctable,$rtproc);

# Check if the process is running as well as the number of restarts since the
# last rtexec restart
    check_process($name,$pid,$starts,$last_start,$execution);
    print_results($name,$pid,$starts,$last_start,$execution);

# Exit with the highest return value of individual tests
    @RETVAL_SORT = sort { $b <=> $a } @RETVAL;
    exit($RETVAL_SORT[0]);
}

sub check_args
{
    GetOptions(
            "V"     => \$opt_version,  "version"  => \$opt_version,
            "v"     => \$opt_verbose,  "verbose"  => \$opt_verbose,
            "h"     => \$opt_help,     "help"     => \$opt_help,
            "w=i"   => \$opt_warn,     "warn=s"   => \$opt_warn,
            "a=i"   => \$opt_alarm,    "alarm=s"  => \$opt_alarm,
            "c=i"   => \$opt_crit,     "crit=s"   => \$opt_crit,
            "i=s"   => \$opt_ignore,   "ignore=s" => \$opt_ignore
    ) || pod2usage(-verbose => 0, -exitval => $ERRORS{'UNKNOWN'});

    my $rtpath = $ARGV[0];
    my $rtproc = $ARGV[1];

    if ($opt_version)
    {
        print "$prog $VERSION\n"; exit $ERRORS{OK}
    }

    if ($opt_verbose)
    {
        $VERBOSE = 1;
        $nagios_antelope_utils::VERBOSE = 1;
    }

    if ($opt_help)
    {
        pod2usage({-exitval => $ERRORS{'OK'}, -verbose => 2, -input => \*DATA});
    }

    if (defined($opt_warn))
    {
        unless ($opt_warn =~ /^[1-9]\d*$/)
        {
            pod2usage({ -message => "Not an accepted value for option --warn.".
                   "Please use a positive integer.",
                   -exitval => $ERRORS{UNKNOWN} });
        }
        else
        {
            $thresh_warn = $opt_warn;
        }
    }

    if (defined($opt_alarm))
    {
        unless ($opt_alarm =~ /^[1-9]\d*$/)
        {
            pod2usage({ -message => "Not an accepted value for option " .
                    "--alarm. Please use a positive integer.",
                    -exitval => $ERRORS{UNKNOWN} });
        }
        else
        {
            $thresh_alarm = $opt_alarm;
        }
    }

    if (defined($opt_crit))
    {
        unless ($opt_crit =~ /^[1-9]\d*$/)
        {
            pod2usage({ -message => "Not an accepted value for option " ."
                    --crit. Please use a positive integer.",
                    -exitval => $ERRORS{UNKNOWN} });
        }
        else
        {
            $thresh_crit = $opt_crit;
        }
    }

    if (defined($opt_ignore))
    {
        unless ($opt_ignore =~ /^(0|1|true|false)$/)
        {
            pod2usage({ -message => "Not an accepted value for option " .
                    "--ignore. Please use '1' or 'true'.",
                    -exitval => $ERRORS{UNKNOWN} });
        }
    }

    if ($thresh_warn >= $thresh_alarm)
    {
        pod2usage({ -message => "The threshold value for 'warn' cannot " .
                "equal or exceed the value for 'alarm'.",
                -exitval => $ERRORS{UNKNOWN} });
    }

    if ($thresh_alarm >= $thresh_crit)
    {
        pod2usage({ -message => "The threshold value for 'alarm' cannot " .
                "equal or exceed the value for 'crit'.",
                -exitval => $ERRORS{UNKNOWN} });
    }

    unless ($rtpath =~ m#^(/[\w-.]+)+$#)
    {
        pod2usage({ -message => "The realtime system path has disallowed " .
                "characters. Please check the path for directory names " .
                "with metacharacters or correct the path string.",
                -exitval => $ERRORS{UNKNOWN} });
    }

    unless ($rtproc =~ /^[\w-.]+$/)
    {
        pod2usage({ -message => "The realtime process string has " .
                "disallowed metacharacters. Please rename the process " .
                "to use this program.",
                -exitval => $ERRORS{UNKNOWN} });
    }

    my $rtproctable = "$rtpath/rtsys/rtsys.process";

    return ($rtproctable,$rtproc);
}

sub db_query
{
  my $rtproctable = shift;
  my $rtproc = shift;
  my ($name,$pid,$starts,$last_start,$execution,@dbproc);

  eval
  {
    @dbproc = dbopen_table($rtproctable,"r");
    $dbproc[3] = dbfind(@dbproc, "name == '$rtproc'");
    ($name,$pid,$starts,$last_start,$execution) = dbgetv(@dbproc,"name","pid","starts","last_start","execution");
  };

  if ($@)
  {
    print "An error has occurred looking up process information for $rtproc. It's possible that\n";
    print "process '$rtproc' may not exist for the specified realtime system. Please check the\n";
    print "processes table entries in rtexec.pf\n";
    print "ERROR: $@\n";
    exit $ERRORS{CRIT};
  }
  else
  {
    $last_start = epoch2str($last_start,"%L/%d/%Y  %k:%M:%S.%s");
    return ($name,$pid,$starts,$last_start,$execution);
  }
}

sub check_process
{
  my $name		= shift;
  my $pid 		= shift;
  my $starts		= shift;
  my $last_start	= shift;
  my $execution		= shift;
  my $retval		= $ERRORS{OK};

  # Determine if process is running of not. The null value for
  # the pid field in the process table is -1.
  if ($pid == -1)
  {
    push @REASON, "Realtime process $name is not currently running";
    push @RETVAL, $ERRORS{CRIT};
  }
  else
  {
    push @REASON, "Realtime process $name is running with PID $pid";
    push @RETVAL, $ERRORS{OK};
  }

  # Determine additional state based on the number of realtime process restarts
  # since the last rtexec restart. If $opt_ignore is set then skip this

  unless (($opt_ignore == 1) || ($opt_ignore eq "true"))
  {
    if ($starts >= $thresh_crit)
    {
      push @RETVAL, $ERRORS{CRIT};
    }
    if (($starts >= $thresh_alarm) && ($starts < $thresh_crit))
    {
      push @RETVAL, $ERRORS{ALARM};
    }
    elsif (($starts >= $thresh_warn) && ($starts < $thresh_alarm))
    {
      push @RETVAL, $ERRORS{WARN};
    }
    else
    {
      push @RETVAL, $ERRORS{OK};
    }

    # Report the number of process restarts since the last rtexec restart
    push @REASON, "Process restarts since the last rtexec restart is $starts";
  }
  else
  {
    push @REASON, "Ignoring process restart warnings.\n";
  }
}


sub print_results
{
  my $name 				= shift;
  my $pid 				= shift;
  my $starts			= shift;
  my $last_start	= shift;
  my $execution		= shift;

  # Print Intermapper variables
  print "\\{ \$name := \"$name\",
     	     \$pid := \"$pid\",
  	     \$starts := \"$starts\",
  	     \$last_start := \"$last_start\",
  	     \$execution := \"$execution\" } \n";

  # print reason for probe status
  foreach my $i (@REASON)
  {
    chomp($i);
    print "$i\n";
  }
}

__END__

=head1 NAME

nagios_check_rtproc - a Nagios plugin to monitor the status of an rtexec-managed process

=head1 SYNOPSIS

B<nagios_check_rtproc> [B<-i> [I<1>|I<true>]] [B<-w> I<warn>]
[B<-c> I<crit>] I<RT system path> I<RT system process name>

=head1 DESCRIPTION

C<nagios_check_orblag> determines if a process run under Antelope F<rtexec> is
currently running.  The plugin queries the F<rtsys> database in an Antelope
real-time system directory.

It is intended to be used as a plugin to the L<Nagios network monitoring
system|http://www.nagios.org>. The plugin can be installed with other plugins
(usually in the Nagios F<libexec> directory) and called through the Nagios
configuration files.

However, since it requires direct filesystem access to the real-time system
configuration, this script has to be run on the same host as the real-time
system in question. Thus, B<it is recommended that this probe is used in
conjunction with NRPE or similar> so that it can be executed remotely from a
central monitoring box. See L<USAGE WITH NRPE> below for details.

Warnings will be returned if process has been restarted by rtexec.

The default thresholds are as follows:

 State       # of restarts
 -----       -------------
 Warning     2
 Alarm       5
 Critical    10

=head1 OPTIONS

Like all Nagios plugins, more detailed and recent help, argument
formats, etc. can be obtained via the B<-h> option of the program.

The warning thresholds can be customized as follows.

=over 8

=item B<-i>, B<--ignore> [I<1>|I<true>]

Ignore process restart warnings.

=item B<-w>, B<--warn>

Customize the I<Warning> threshold. [Positive Integer]

=item B<-a>, B<--alarm>

Customize the I<Alarm> threshold. [Positive Integer]

=item B<-c>, B<--critical>

Customize the I<Critical> threshold. [Positive Integer]

=back

=head1 USAGE WITH NRPE

Within the F<nrpe.cfg> configuration file, the following declarations must be made for the probe to operate correctly.

1) Set C<dont_blame_nrpe=1>

2) Enter the following line:
   command[check_rtproc]=/<PATH TO NAGIOS PLUGINS ON REMOTE HOST>/check_procs -w $ARG1$ -a $ARG2$ -c $ARG3$ -i $ARG4$ $ARG5$ $ARG6$

3) Be sure to set the C<allowed_hosts> variable as well as the C<nrpe_user>
and C<nrpe_group> variables to a non-root user.

=head1 BUGS AND CAVEATS

The check must run on the same host as the real-time system to be check. See
note in L<DESCRIPTION> section regarding B<NRPE>.

=head1 SEE ALSO

nagios_antelope_utils(3)
rtexec(1)
NRPE

=head1 AUTHOR

 Juan Reyes and Geoff Davis
 Scripps Institution of Oceanography

=head1 SUPPORT

Contributed: NO BRTT support -- please contact author.

=cut

#vim:ft=perl
