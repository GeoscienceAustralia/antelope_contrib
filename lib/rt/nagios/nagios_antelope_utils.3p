.TH nagios_antelope_utils 3p "$Date$"

.SH NAME
parse_ranges, categorize_return_value \- utilities for Nagios plugins
.SH SYNOPSIS
.nf
use nagios_antelope_utils qw(&categorize_return_value
	&parse_ranges %ERRORS $VERBOSE);

($warn_at, $warn_hi, $warn_low, $crit_at, $crit_hi, $crit_low)
	= \fBparse_ranges\fP($\fIwarning_input\fP, $\fIcritical_input\fP)
($error_code, $description) = \fBcategorize_return_value\fP($\fIreturn_value\fP,
	$\fIwarn_at\fP, $\fIwarn_hi\fP, $\fIwarn_low\fP, $\fIcrit_at\fP, $\fIcrit_hi\fP, $\fIcrit_low\fP)
print_version($VERSION, $AUTHOR);
print_results($service_name, $result_code, $result_perf_val, $result_descr);
.fi
.SH DESCRIPTION
\fBparse_ranges\fP reads in user input to \-w and \-c options and parses
the fields into a set of variables that are easier to use. The format for
the warn and critical input is the standard Nagios range grammar as
described in the Nagios plugin development guide:

   [@]start:end

   Notes:
   \- start > end>
   \- start and ":" is not required if start=0
   \- if range is of format "start:" and end is not specified,
       assume end is infinity
   \- to specify negative infinity, use "~"
   \- alert is raised if metric is outside start and end range
      (inclusive of endpoints)
   \- if range starts with "@", then alert if inside this range
      (inclusive of endpoints)

\fBcategorize_return_values\fP takes the retrieved value from and
sorts it into a valid Nagios plugin return code given the warning
and critical ranges that were input. The arguments include the return
value that needs to be sorted, along with the values that make up the
output of the \fBparse_ranges\fP subroutine.

\fBprint_version\fP prints a version banner with version number and author
to STDOUT.

\fBprint_results\fP prints to STDOUT a Nagios-friendly string with the service
name, a result code, a performance value, and a description of that value.

%\fIERRORS\fP is an associative array to be used for generating return
values. It is defined as follows:
.nf
%\fIERRORS\fP=('OK'=>0,'WARNING'=>1,
               'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);
.fi
.SH EXAMPLE
For parsing ranges, one might use a section of code that appears as follows:
.in 2c
.ft CW
.nf
    if ((defined $opt_warn) && (defined $opt_crit))
    {
        ($warn_at, $warn_hi, $warn_low, $crit_at, $crit_hi, $crit_low) =
            parse_ranges($opt_warn, $opt_crit);
        if ((!defined $warn_at) || (!defined $warn_hi)
	     || (!defined $warn_low)
             || (!defined $crit_at) || (!defined $crit_hi)
             || (!defined $crit_low))
        {
             print "Error in threshold ranges!\\n";
             exit $ERRORS{'UNKNOWN'};
        }
    }

.fi
.ft R
.in
One might then obtain a value to check, and categorize it with the following:
.in 2c
.ft CW
.nf
{
    ...
    return categorize_return_value($time_difference, $warn_at,
    				   $warn_hi, $warn_low,
				   $crit_at, $crit_hi, $crit_low);
}
.fi
.ft R
.in

.SH RETURN VALUES
\fBparse_ranges\fP returns a set of variables indicating the range of data
that was parsed. This includes an @ sign in the $\fIwarn_at\fP and
$\fIcrit_at\fP variables if one was entered. The $\fIwarn_hi\fP and
$\fIcrit_hi\fP variables get the upper bound of the range, and the
$\fIwarn_low\fP and $\fIcrit_low\fP variables get the lower bound of the
range. If there were errors parsing, an empty list is returned.

\fBcategorize_return_value\fP returns an error code suitable for exiting
with, along with the return value that was checked.

.SH DIAGNOSTICS
To obtain more info on STDOUT about the parsing and values obtained, set the
$\fInagios_antelope_utils::VERBOSE\fP flag to 1.
.SH "SEE ALSO"
.nf
nagios_check_orbstat(1)
.fi
.SH AUTHOR
Steve Foley
.br
Institute of Geophysics and Planetary Physics
.br
Scripps Institution of Oceanography
.\" $Id$
